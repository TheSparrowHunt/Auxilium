<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_rock_0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_solidForPathFinding</parentName>
  <maskName>spr_0Size</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
height = 100;
deltaheight = 0.0;
deltadeltaheight = 0.5;
rspeed = 5; //the speed of rotation, how fast it rotates
Point_dir = 0; //the variable that will store what direction to rotate to

vel=0.7; //the initial speed of movement

bounceState = true; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (bounceState){
    deltaheight += deltadeltaheight;
    height -= deltaheight;
    
    if (height &lt;= 0){
        deltaheight = -deltaheight;
        deltaheight *= 0.9;
        //if absolute val of deltaheight is less than
        if (abs(deltaheight) &lt;= 1.0){
            height = 0;
            //stop bouncing, just roll
            bounceState = false;
        }
    }
    
}

//if not on the ground yet
if (height &gt; 0) {
    if (mask_index != spr_0Size){
        mask_index = spr_0Size;
    }
}
else if (height &lt;= 0){
    //basically sets collisions on
    if (mask_index != sprite_index){
        mask_index = sprite_index;
    }
    
    if (place_meeting(x, y, obj_player)){
        room_restart();
    }
}


    
movex = vel; // move x with velocity speed
movey = 0; //static y
vel -= 0.001; // 
rspeed -= 0.01;
if (vel &lt;= 0.05 || rspeed &lt;= 0.5) {
    vel = 0;
    rspeed = 0;
}
Point_dir = image_angle + 90; //the angle to rotate to, add 90 degrees to current angle

image_angle -= sin(degtorad(Point_dir - image_angle))*rspeed;

collisionCheck();
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
