<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_water</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_solidForPathFinding</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>height = 0;
drawx = x;
drawy = y; 
image_speed = 0.25;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//empty code block to prevent destruction of a shadow that doesn't exist
//horrible fix, should fix the shadow code really but I'm tired and there's not much
//time left

//no longer empty
instance_create(x, y, obj_walkableWater);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//weird hack for weird collision checking

//store the current mask to change back to later
var previousMask = mask_index;
//set up uniqueId storage vars
var bottomId = -1;
var topId = -1;
var leftId = -1;
var rightId = -1;



var in = false;
//changing the mask index for collision checking
//gamemaker doesn't have runtime collision mask modifying at run-time. 
mask_index = spr_16x8;
//bottom
if (instance_place(x, y+(sprite_get_height(sprite_index)/4), obj_moveableRock) != noone){
    bottomId = instance_place(x, y+(sprite_get_height(sprite_index)/4), obj_moveableRock);
}

//top
if (instance_place(x, y-(sprite_get_height(sprite_index)/4), obj_moveableRock) != noone){
    topId = instance_place(x, y+(sprite_get_height(sprite_index)/4), obj_moveableRock);
}

//long mask
mask_index = spr_8x16;

//right
if (instance_place(x+(sprite_get_height(sprite_index)/4), y, obj_moveableRock) != noone){
    rightId = instance_place(x, y+(sprite_get_height(sprite_index)/4), obj_moveableRock);
}

//left
if (instance_place(x-(sprite_get_height(sprite_index)/4), y, obj_moveableRock) != noone){
    leftId = instance_place(x, y+(sprite_get_height(sprite_index)/4), obj_moveableRock);
}


if ((topId == bottomId) &amp;&amp; (leftId == rightId) &amp;&amp; (topId == leftId)){
    //check it's not just the default value
    //doesn't matter that it's the top one if they're all equal.
    if (topId != -1){
        in = true;
        //DEBUG
        //instance_destroy();
        with(topId){
            instance_destroy();
        }
        instance_destroy();
    }
}

var sideNotBottom = false;
var sideNotTop = false;
var sideNotLeft = false;
var sideNotRight = false;

/*if (in){
    //check not touching the sides
    //changing the mask index for collision checking
    //gamemaker doesn't have runtime collision mask modifying at run-time.
    //mask_index = spr_16x1;
    //bottom
    sideNotBottom = place_meeting(x, y+(sprite_get_height(sprite_index)/2), obj_moveableRock);
    

    //top
    sideNotTop  = place_meeting(x, y+(sprite_get_height(sprite_index)/2), obj_moveableRock);

    //long mask
    mask_index = spr_1x16;

    //right
    sideNotRight = place_meeting(x, y+(sprite_get_width(sprite_index)/2), obj_moveableRock);

    //left
    sideNotLeft = place_meeting(x, y+(sprite_get_width(sprite_index)/2), obj_moveableRock);
    
    if (sideNotBottom &amp;&amp; sideNotTop &amp;&amp; sideNotRight &amp;&amp; sideNotLeft){
        with(topId){
            instance_destroy();
        }
        instance_destroy();
    }
}*/
//change back to normal mask
mask_index = previousMask;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
