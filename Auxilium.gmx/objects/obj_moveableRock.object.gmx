<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_circluarRock</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_solidForPathFinding</parentName>
  <maskName>spr_rock_0</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
solidMovesCreate();

imgAngle = 0;

movecounter = 0;
previousmovex = 0;
previousmovey = 0;

point_dir_r = 0;
point_dir_d = 270;
point_dir_l = 180;
point_dir_u = 90;

rspeedx = 0;
//rspeedy = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movex = 0;
movey = 0;

tmpSprWidth = sprite_get_width(sprite_index)/2;

tmpSprHeight = sprite_get_height(sprite_index)/2;

if place_meeting(x-1, y, obj_player) {
    var flag = false;
    with (obj_player) {
        if (movex &gt; 0) {
            flag = true;
            other.movex = movex;
            other.rspeedx = movex;
        }
    }
    if (flag){
        point_dir_r = imgAngle + 90;
        imgAngle -= sin(degtorad(point_dir_r - imgAngle))*rspeedx;
    }
}
if place_meeting(x+1, y, obj_player) {
    var flag = false;
    with (obj_player) {
        if (movex &lt; 0) {
            other.movex = movex;
            other.rspeedx = movex;
            flag = true;
        }
    }
    if (flag){
        point_dir_l = imgAngle + 90;
        imgAngle -= sin(degtorad(point_dir_l - imgAngle))*rspeedx;
    }
}
if place_meeting(x, y-1, obj_player) {
    var flag = false;
    with (obj_player) {
        if (movey &gt; 0) {
            other.movey = movey;
            //other.rspeedy = movey;
            //flag = true;
        }
    }
    //if (flag){
      //  point_dir_d = imgAngle + 90;
        //imgAngle -= sin(degtorad(point_dir_d - imgAngle))*rspeedy;
    //}
}
if place_meeting(x, y+1, obj_player) {
    var flag = false;
    with (obj_player) {
        if (movey &lt; 0) {
            other.movey = movey;
            //other.rspeedy = movey;
            //flag = true;
        }
    }
    //if (flag){
       // point_dir_u = imgAngle + 90;
        //imgAngle -= sin(degtorad(point_dir_u - imgAngle))*rspeedy;
    //}
}

previousmovex = movex;
previousmovey = movey;


collisionCheck();
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index, image_index, drawx, drawy, image_xscale, image_yscale, imgAngle, c_white, image_alpha);
clearDraw();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
