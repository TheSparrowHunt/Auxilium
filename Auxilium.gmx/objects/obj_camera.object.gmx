<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//forcing a singleton for protection
/*if (instance_number(obj_camera) &gt; 0){
    instance_destroy();
}*/
fromx = x;
fromy = y;
//the destination we're going to
finalx = x;
finaly = y;
//setting the defaults
initCamera();
//counter for easing x
lerpCounterx = 0.0;
//counter for easing y
lerpCountery = 0.0;

//this is where the good stuff is, edit these for different camera movement
lerpModifierx = 0.05;
lerpModifiery = 0.05;
//the rate of change in speed (easing)
lerpModifierModifierx = 0.000055;
lerpModifierModifiery = 0.000055;
//the slowest the camera can go
minimumCameraMovement = 0.00065;
//how fast it should start at
startingCameraSpeed = 0.01;
//gets the name of the current room and stores it to check if we've changed room later
previousRoom = room_get_name(room);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//checks if the room it's in is different than the stored one
if (previousRoom != room_get_name(room)){
    initCamera();
    previousRoom = room_get_name(room);
}

//if the camera isn't already at it's destination
if (x != finalx){
    //if the camera isn't already lerping between positions
    if(lerpCounterx == 0.0){
        lerpCounterx = 0.1;
        lerpModifierx = startingCameraSpeed;
    }
    //if the camera has overshot its destination
    else if (lerpCounterx &gt; 1.0){
        lerpCounterx = 1.0;
    }
    //if we're lerping, although we should probably call this something else as it's no longer linear!
    else{
        //adjusts the rate of change
        lerpModifierx -= lerpModifierModifierx;
        //protection against it zeroing and staying in place
        if (lerpModifierx &lt; minimumCameraMovement){
            lerpModifierx = minimumCameraMovement;
        }
        
        //adjusts the change
        lerpCounterx += lerpModifierx;
    }
    //make x be a point between where it came from and where it's going
    x = lerp(fromx, finalx, lerpCounterx);
}
else{
    lerpCounterx = 0.0;
    //set this position as the from point for when we move the camera again
    fromx = x;
}

//if the camera isn't already at it's destination
if (y != finaly){
    //if the camera isn't already lerping between positions
    if(lerpCountery == 0.0){
        lerpCountery = 0.1;
        lerpModifiery = startingCameraSpeed;
    }
    //if the camera has overshot its destination
    else if (lerpCountery &gt; 1.0){
        lerpCountery = 1.0;
    }
    //if we're lerping, although we should probably call this something else as it's no longer linear!
    else{
        //adjusts the rate of change
        lerpModifiery -= lerpModifierModifiery;
        //protection against it zeroing and staying in place
        if (lerpModifiery &lt; minimumCameraMovement){
            lerpModifiery = minimumCameraMovement;
        }
        
        //adjusts the change
        lerpCountery += lerpModifiery;
    }
    //make y be a point between where it came from and where it's going
    y = lerp(fromy, finaly, lerpCountery);
}
else{
    lerpCountery = 0.0;
    //set this position as the from point for when we move the camera again
    fromy = y;
}
//self explanitory
updateCamera();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(  0,300, "X: "+ string(x));
draw_text(  0,310, "Y: "+ string(y));
draw_text(  0,320, "view_wport: "+ string(view_wport[0]));
draw_text(  0,330, "view_hport: "+ string(view_hport[0]));
draw_text(  0,340, "view_wview: "+ string(view_wview[0]));
draw_text(  0,350, "view_hview: "+ string(view_hview[0]));
draw_text(  0,360, "view_xport: "+ string(view_xport[0]));
draw_text(  0,370, "view_yport: "+ string(view_yport[0]));
clearDraw();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
